# Documentation about configuration: https://tox.readthedocs.io/en/latest/config.html
[tox]
download = True
minversion = 3.4.0
envlist = clean,cover,report
requires =
    tox-venv
    setuptools
    tox-pip-version
    docker
    docker-compose

skipsdist = True
skip_install = False

[testenv]
pip_version = pip>=19.0.1
usedevelop = True
install_command = pip install -crequirements.txt {opts} {packages}
# install_command = pip install -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=stable/pike} {opts} {packages}
passenv =
    HOME
whitelist_externals =
    bash
setenv =
    VIRTUAL_ENV={envdir}
    PYTHONWARNINGS=default::DeprecationWarning
    TESTS_DIR=./tests/
deps = -r{toxinidir}/requirements-test.txt
commands = pytest {posargs} ./tests ./java_role/tests

[testenv:clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:pep8]
commands =
#    pycodestyle --show-source --show-pep8 --statistics --repeat --exclude=.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.env,*.rst,*.md --ignore E006,E121,E123,E126,E226,E24,E704,W503,W504
    pycodestyle --show-source --show-pep8 --statistics --repeat {posargs}
    flake8 {posargs} java_role
# Check the *.rst files
# We use a thin wrapper around doc8 currently, which has support for sphinx
# directives. We install sphinx 1.5.x because versions prior to this
# (installed due to upper constraints) automatically import all
# sphinx.directive.* modules when any one of those modules is imported, and
# importing sphinx.directive.other breaks docutils parsing.
    python {toxinidir}/tools/sphinx8.py README.md CONTRIBUTING.md docs/source docs/build --ignore D001

[testenv:venv]
commands = {posargs}

[testenv:docs]
commands = sphinx-build -b html ./docs/source ./docs/build

[testenv:debug]
commands = oslo_debug_helper {posargs}

[testenv:ansible]
usedevelop = True
# Create the virtualenv with access to system site packages, as this is
# required to use the python and apt modules, which are not available via PyPI.
sitepackages = True
install_command = pip install -c requirements.txt {opts} {packages}
commands =
    bash -c \
    "ansible-playbook \
    --connection=local \
    {toxinidir}/ansible/roles/*/tests/main.yml \
    {posargs}"

[testenv:molecule]
install_command = pip install -c requirements.txt {opts} {packages}
commands =
# Install ansible role dependencies from Galaxy.
    ansible-galaxy install \
    -r {toxinidir}/requirements.yml \
    -p {toxinidir}/ansible/roles
    {toxinidir}/tools/test-molecule.sh {posargs}

[testenv:alint]
commands = ansible-lint *.yaml

[testenv:cover]
setenv =
    VIRTUAL_ENV={envdir}
    PYTHON=coverage run --source java_role --parallel-mode
commands =
;    coverage erase
    pytest {posargs}
;    coverage combine
;    coverage report

[testenv:ansible-syntax]
commands =
# Install ansible role dependencies from Galaxy.
    ansible-galaxy install \
    -r {toxinidir}/requirements.yml \
    -p {toxinidir}/ansible/roles
# Perform an Ansible syntax check. Skip some playbooks which require extra
# variables to be defined.
    bash -c \
    "ansible-playbook \
    --connection=local \
    --syntax-check \
    --list-tasks \
    $(find {toxinidir}/ansible \
    -maxdepth 1 \
    -name '*.yml' \
    -not -name idrac-bootstrap-one.yml \
    -not -name idrac-bootstrap.yml) \
    {posargs}"


;[testenv:releasenotes]
;deps =
;    -c{toxinidir}/requirements.txt
;    -r{toxinidir}/requirements.txt
;    -r{toxinidir}/requirements-test.txt
;commands =
;    rm -rf releasenotes/build
;    sphinx-build -a -E -W -d releasenotes/build/doctrees --keep-going -b html releasenotes/source releasenotes/build/html

[flake8]
show-source = True
ignore = E123,E125
builtins = _
exclude = .ansible/.env,.vagrant,.venv,.git,.tox,dist,docs,*lib/python*,*egg,build

[pytest]
addopts = -p no:cacheprovider -p no:stepwise
python_files = tests.py test_*.py *_tests.py


[pycodestyle]
count = False
ignore = E006,E121,E123,E126,E226,E24,E704,W503,W504
max-line-length = 160
statistics = True
exclude = .svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.env,*.rst,*.md

[run]
branch = True
source = java_role

[report]
ignore_errors = True

# Regexes for lines to exclude from consideration
exclude_lines =
# Have to re-enable the standard pragma
    pragma: no cover

# Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

# Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

# Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

[html]
directory = coverage_html_report